#!/bin/bash

configs=/vagrant/flyway/conf
prodConfig=$configs/employees.properties
devConfig=$configs/employees_dev.properties
devCompareConfig=$configs/employees_dev_compare.properties

flyway_info_prod() {
  flyway/flyway info -configFile=$prodConfig
}

flyway_init_prod() {
  flyway/flyway init -configFile=$prodConfig
  flyway_info_prod
}

__dropAndCreateDatabase(){
  if [[ -z "$@" ]]; then
    echo >&2 "You must supply the name of the database you want to drop and create"
    return
  fi
  database=$1
  dropAndCreate="DROP DATABASE IF EXISTS $database; CREATE DATABASE $database;"
  echo $dropAndCreate
  mysql -e "$dropAndCreate"
}

create_database_from_migrations() {
  if [[ -z "$@" ]]; then
    echo >&2 "You must supply the name of the database you want to create!"
    return
  fi

  database=$1
  __dropAndCreateDatabase $database

  initDescription=New_database_marked_as_v0_so_v1_is_applied
  flyway/flyway init migrate -configFile=$configs/$database.properties -initVersion=0 -initDescription=$initDescription
}

flyway_info_dev() {
  flyway/flyway info -configFile=$devConfig
}

create_dev_database_from_migrations() {
  create_database_from_migrations employees_dev
}

create_dev_compare_database_from_migrations() {
  create_database_from_migrations employees_dev_compare
}

compare_dev_to_prod() {
  # comparing databases named different triggers false positives with mysqldbcompare, might want to use other comparison tools like the mysql workbench which will ignore that, or Toad / red gate's mysql compare which both will ignore database name
  mysqldbcompare --server1=vagrant@localhost employees:employees_dev --run-all-tests --skip-data-check --skip-row-count 
}

compare_dev_to_dev_compare() {
  mysqldbcompare --server1=vagrant@localhost employees_dev:employees_dev_compare --run-all-tests --skip-data-check --skip-row-count 
}

flyway_dev() {
  flyway/flyway -configFile=$devConfig $@
}

flyway_compare() {
  flyway/flyway -configFile=$devCompareConfig $@
}

flyway_prod() {
  flyway/flyway -configFile=$prodConfig $@
}

__backup() {
  if [[ -z "$@" ]]; then
    echo >&2 "You must supply the name of the database you want to backup"
    return
  fi
  database=$1
  to_file=${2-$database.sql.gz}
  echo "Backing up $database to $to_file"
  mysqldump $database | gzip --fast > $to_file
}

backup_dev() {
  __backup employees_dev $@
}

backup_changed_dev() {
  __backup employees_dev employees_changed_dev.sql.gz
}

backup_prod() {
  __backup employees $@
}

__restore() {
  if [[ -z "$@" ]]; then
    echo >&2 "You must supply the name of the database you want to restore"
    return
  fi
  database=$1
  # can restore from other sources too if passed as an argument
  # might want to restore a backup from someone else
  # could have some shared network location where people can dump their database to and others can fetch from, then one liner for Jane to dump employees_dev.jane.sql.gz and then Bob could run restore_dev /path/to/employees_dev.jane.sql.gz
  # this would allow Jane and Bob to exchange database test sets easily
  from_file=${2-$database.sql.gz}
  __dropAndCreateDatabase $database
  echo "Restoring $database from $from_file"
  gunzip < $from_file | mysql $database
}

restore_dev() {
  __restore employees_dev $@
}

restore_dev_compare() {
  __restore employees_dev_compare $@
}

clone_dev_to_dev_compare() {
  __backup employees_dev employees_dev_to_dev_compare.sql.gz
  __restore employees_dev_compare employees_dev_to_dev_compare.sql.gz
}
